*hz.vim.txt*	Collected functions and commands for my vimrc
Austin Ziegler <halostatue@gmail.com>                        *Hz.vim* *hz.vim*

==============================================================================
CONTENTS                                                     *hz.vim-contents*
  1. Introduction........................................|hz.vim-introduction|
  2. Configuration.............................................|hz.vim-config|
  3. Functions..............................................|hz.vim-functions|
  4. Compatibility......................................|hz.vim-compatibility|
  5. Licence..................................................|hz.vim-licence|

==============================================================================
INTRODUCTION                                             *hz.vim-introduction*


Hz.vim is a collection of functions and commands that power Austin Ziegler's
vim configuration.

==============================================================================
CONFIGURATION                                                  *hz.vim-config*

                                                                        *g:hz*
The global default foldtext function for use with |hz#ui#smart_foldtext(()|).

                                                    *b:hz#ui#default_foldtext*
A buffer-specific default foldtext function for use with
|hz#ui#smart_foldtext(()|).

                                                             *g:hzvim_guifont*
The value of guifont. Defaults to Fira Code, Input Mono Narrow, Source Code
Pro, Inconsolata Medium, Anonymous Pro, DejaVu Sans Mono, and Andale Mono.

                                                        *g:hzvim_guifont_size*
The pointsize of values in |g:hzvim_guifont| when the point size is not
provided. The default is 10 points.

==============================================================================
FUNCTIONS                                                   *hz.vim-functions*

hz#platform()                                                  *hz#platform()*
  Returns a string representing the underlying platform as Hz.vim understands
  it. Will be one of `windows`, `cygwin`, `mac`, or `unix`.

hz#valid_function({varname})                             *hz#valid_function()*
  Report whether the function in {varname} provided exists, and if so,
  contains a valid function name. The function name may be a bare name (`fn`)
  or have parentheses at the end (`fn()`).

hz#mkpath({path}, [force])                                       *hz#mkpath()*
  Make {path}, prompting unless [force] is provided.

hz#isotime([time])                                              *hz#isotime()*
  Portably produce a proper ISO 8601/RFC3339 timestamp. If [time] is not
  provided, the current time will be used.

hz#try([dict], [default], {Func}, [args])                           *hz#try()*

  Try to call the given [Func] with an optional dictionary, default, and
  arguments.

      hz#try('fugitive#statusline')
  hz#try(function('fugitive#statusline'))

  If [Func] is a dictionary function (and not a partial function reference),
  it is necessary to provide the [dict] parameter to properly provide `self`.

      hz#try({}, 'dict.Func')

  A [default] value may be provided before the function reference, if it is
  inside of a list.

      hz#try(['default'], 'F')

  Arguments are passed after the function name or reference.

      hz#try(['default'], 'F', 1, 2, 3)

  This function is originally by Tim Pope as part of Flagship.

  [default] is '' if omitted.
  [dict] is {} if omitted.
  [args] is [] if omitted.

hz#in({haystack}, {needle})                                          *hz#in()*
  Answers if {needle} can be found in the provided {haystack} which may be a
  string, list, or dictionary (where is searches the values).

  If {haystack} is a string, but {needle} is not, returns false. If {haystack}
  is neither a string, list, nor dictionary, returns false.

hz#trim_leading({string}, [pattern])                       *hz#trim_leading()*
  Trims leading [pattern] from {string}.

  [pattern] is '\_s' The regex for whitespace and newlines. if omitted.

hz#trim_trailing({string}, [pattern])                     *hz#trim_trailing()*
  Trims trailing [pattern] from {string}.

  [pattern] is '\_s' The regex for whitespace and newlines. if omitted.

hz#trim({string}, [pattern])                                       *hz#trim()*
  Trims both leading and trailing [pattern] from {string}.

  [pattern] is '\_s' The regex for whitespace and newlines. if omitted.

hz#in_place({command})                                         *hz#in_place()*
  Executes {command} while saving and restoring the window state.

hz#with_saved_search({command})                       *hz#with_saved_search()*
  Executes {command} while saving and restoring the most recent saved search
  history and the window state.

hz#clean_whitespace()                                  *hz#clean_whitespace()*
  Clean trailing whitespace from the range.

hz#get_setting({setting}, [default])                        *hz#get_setting()*
  Gets the value of {setting}, checking for a buffer override then a global
  value. That is, {setting} will be pulled from |b:|, then |g:|. A [default]
  value may be provided.

hz#get_motion({motion})                                      *hz#get_motion()*
  Execute the normal mode {motion} and return the text that it marks. For this
  to work, the {motion} must include a visual mode key (`V`, `v`, or `gv`).

  Both the 'z' register and the original cursor position will be restored
  after the text is yanked.

hz#mark_visual({command}, {start}, {end})                   *hz#mark_visual()*
  Run the normal mode {command} from line {start} to {end}, opening any folds.


hz#switch_window({bufname})                               *hz#switch_window()*
  Programmatically jump to the window identified by {bufname}.

hz#buffer#timer({bufnr}, {callback}, [interval])           *hz#buffer#timer()*
  Sets an update {callback} for a given {bufnr} every [interval], executing
  infinitely. Returns the timer number.

  [interval] is 500 ms if omitted.

hz#bufferize#do({command})                                 *hz#bufferize#do()*
  Execute a command, capturing (appending) its output to a buffer. It works
  with hidden buffers as well as visible buffers.

  Copied from functions by Andrew Radev.

hz#bufferize#bufnr({command})                           *hz#bufferize#bufnr()*
  Return the buffer number if the buffer has a window visible on this tabpage.
  Return a negative buffer number if the buffer is not visible.

hz#bufferize#messages()                              *hz#bufferize#messages()*
  Bufferizes the `messages` command with an update callback. If messages are
  already bufferized, does nothing.

hz#cache#root()                                              *hz#cache#root()*
  Return the cache root path.

hz#cache#for({path...})                                       *hz#cache#for()*
  Create and return a named cache for the given {path...}.

hz#config#loaded([name])                                  *hz#config#loaded()*
  If [name] is provided, reports whether a file or pattern matching [name] has
  been loaded.

  If not provided, returns a dict of all configuration files loaded through
  hz#config functions, as well as the patterns that loaded them in the first
  place.

hz#config#name({pattern})                                   *hz#config#name()*
  Normalizes the pattern provided to a config pattern.

    * hz#config#name('init') -> 'config/init.vim'
    * hz#config#name('config/init') -> 'config/init.vim'
    * hz#config#name('plug/*') -> 'config/plug/*.vim'
    * hz#config#name('/etc/init.vim') -> '/etc/init.vim'

hz#config#exists([from], {pattern})                       *hz#config#exists()*
  Returns v:true if {pattern} can be found in [from], which is 'runtimepath'
  by default.

  [from] is 'runtimepath' if omitted.

hz#config#runtime({pattern...})                          *hz#config#runtime()*
  Source the file or files expressed by {pattern...} from 'runtimepath'. This
  is similar to the the |:source| command.

  Multiple patterns may be provided either as multiple arguments or one or
  more lists of patterns.

hz#config#source({pattern...})                            *hz#config#source()*
  Source the file or files expressed by {pattern...} as config names (see
  |hz#config#name()| from 'runtimepath'.

  Multiple patterns may be provided either as multiple arguments or one or
  more lists of patterns.

  If one or more files has been loaded, one or more keys will be set to
  `v:true`. The following two examples mean the same thing:

      hz#config#source('editing', 'viewing')

      hz#config#source(['editing', 'viewing'])

hz#config#platform()                                    *hz#config#platform()*
  Sources config files that match the platform has returned from
  |hz#platform()|.

hz#config#ui()                                                *hz#config#ui()*
  If the GUI is running (`has('gui_running')`), sources a `gui` config file.
  If not, it sources a `terminal` config file.

hz#filetype#reset()                                      *hz#filetype#reset()*
  Reset some commonly changed defaults by filetype/syntax plug-ins to better
  match my preferences. If a function hz#filetype#&filetype exists, call it
  (allowing further overrides to be provided as functions in this file).

hz#fn#add({list}, {item})                                        *hz#fn#add()*
  Add {item} to a copy of {list}. See |add()|.

hz#fn#extend({expr1}, {expr2})                                *hz#fn#extend()*
  Merge {expr2} to a copy of {expr1}. See |extend()|.

hz#fn#filter({expr1}, {expr2})                                *hz#fn#filter()*
  Remove items from a copy of {expr1} using {expr2}. See |filter()|.

hz#fn#get({list}, {index}, [default])                            *hz#fn#get()*
  Get a copy of the item at {index} from |List| {list}, returning [default] if
  it is not available.

  See |get()|.

hz#fn#get({dict}, {key}, [default])
  Get an copy of the item with key {key} from |Dictionary| {dict}, returning
  [default] if it is not available.

  See |get()|.

hz#fn#get({func}, {what})
  Get an item {what} from Funcref {func}.

  See |get()|.

hz#fn#insert({list}, {item}, [index])                         *hz#fn#insert()*
  Insert {item} into a copy of {list}, at [index]. See |insert()|.
  [index] is 0 if omitted.

hz#fn#remove({list}, {idx}, [end])                            *hz#fn#remove()*
  Removes and returns a copy of the item at {idx} in {list}. If [end] is
  present, removes and returns a list containing a copy of the items from
  {idx} to [end].

  This function is similar to |remove()|, but has a different return signature
  (`[item, copy]` or `[[item, ...], copy]`) so that the immutability of the
  list or dictionary is maintained.

hz#fn#remove({dict}, {key})
  Returns and removes a copy of the item with the key {key} in {dict}.

  This function is similar to |remove()|, but has a different return signature
  (`[item, copy]` or `[[item, ...], copy]`) so that the immutability of the
  list or dictionary is maintained.

hz#fn#reverse({list})                                        *hz#fn#reverse()*
  Return a reversed copy of {list}. See |reverse()|.

hz#fn#sort({list}, [func], [dict])                              *hz#fn#sort()*
  Return a sorted copy of {list}. See |sort()|.

hz#fn#uniq({list}, [func], [dict])                              *hz#fn#uniq()*
  Return a copy of a list with second and succeeding copies of repeated
  adjacent list items in-place. See |uniq()|.

hz#fn#values({dict})                                          *hz#fn#values()*
  Return a copy of the values of {dict}. See |values()|.

  Note that there is no hz#fn#keys() because dictionary keys are essentially
  immutable in Vim as they can only be strings.

hz#fn#replace({list}, {idx}, {item})                         *hz#fn#replace()*
  Returns a copy of {list} where the item at {index} is a copy of {item}.


hz#fn#replace({dict}, {key}, {value})
  Returns a copy of {dict} where the item with key {key} is a copy of {item}.

hz#fn#pop({list}, {idx})                                         *hz#fn#pop()*
  Returns a copy of {list} where the item at {index} has been removed.


hz#fn#pop({dict}, {key})
  Returns a copy of {dict} where the item with key {key} has been removed.

hz#fn#wrap({expr})                                              *hz#fn#wrap()*
  If {expr} is a list, returns {expr}. Otherwise, it wraps {expr} in a list.

hz#fn#flatten({list...})                                     *hz#fn#flatten()*
  Return a flattened copy of {list...}.

hz#fn#map({expr1}, {expr2})                                      *hz#fn#map()*
  Returns a copy of {expr1} that has each item replaced with the result of
  evaluating {expr2}. See |map()|.

hz#fn#filter({expr1}, {expr2})                                *hz#fn#filter()*
  Returns a copy of {expr1} containing items where {expr2} is true. See
  |filter()|.

hz#fn#items({dict})                                            *hz#fn#items()*
  Returns a list with a copy of all the key-value pairs of {dict}. Each item
  is a list containing the key and the corresponding value. See |items()|.

hz#fn#reject({expr1}, {expr2})                                *hz#fn#reject()*
  Returns a copy of {expr1} containing items where {expr2} is false. See
  |filter()|.

hz#fn#reduce({expr}, [initial], {Fn})                         *hz#fn#reduce()*
  Loops over the items in {expr} (which must be a |List| or |Dictionary|) and
  executes {Fn}. If [initial] is not provided, the first item in {expr} is
  used as the initial value. The default [initial] value for a dictionary is
  an empty dictionary.

  When {expr} is empty, the [initial] value will be returned.

  {Fn} must be a function reference or lambda that returns the accumulator
  (`acc`) value. If {expr} is a |List|, {Fn} must accept two arguments (`val`
  and `acc`). If {expr} is a |Dict|, {Fn} must accept three arguments (`key`,
  `val`, and `acc`). Unlike |map()| and |filter()|, {Fn} may not be a string
  value (there is no easy way to simulate a `v:acc` parameter).

hz#fn#any({expr}, {Fn})                                          *hz#fn#any()*
  Loops over the items in {expr} and executes {Fn}, returning true if {Fn} is
  true for any value in {expr}. The value of {Fn} is the same as can be found
  for |filter()|.

  If {Fn} is a string that is not the name of a function, this function will
  be slower than if it is a function name or a function reference.

hz#fn#none({expr}, {Fn})                                        *hz#fn#none()*
  Loops over the items in {expr} and executes {Fn}, returning false if {Fn} is
  true for any value in {expr}. The value of {Fn} is the same as can be found
  for |filter()|.

  If {Fn} is a string that is not the name of a function, this function will
  be slower than if it is a function name or a function reference.

hz#fn#all({expr}, {Fn})                                          *hz#fn#all()*
  Loops over the items in {/expr} and executes {Fn}, returning false if {Fn}
  is false for any value in {expr}. The value of {Fn} is the same as can be
  found for |filter()|.

  If {Fn} is a string that is not the name of a function, this function will
  be slower than if it is a function name or a function reference.

hz#is#mac()                                                      *hz#is#mac()*
  Returns v:true if the platform is a Mac

hz#is#macgui()                                                *hz#is#macgui()*
  Returns v:true if the platform is a Mac running the MacVim GUI

hz#is#windows()                                              *hz#is#windows()*
  Returns v:true if the platform is Windows

hz#is#cygwin()                                                *hz#is#cygwin()*
  Returns v:true if the platform is Cygwin

hz#is#sudo()                                                    *hz#is#sudo()*
  Returns v:true if the platform is running under `sudo`.

hz#is#tmux()                                                    *hz#is#tmux()*
  Returns v:true if vim is running under tmux

hz#is#plugged({plug...})                                     *hz#is#plugged()*
  Returns v:true if any {plug...} has been added to the vim-plug
  configuration.

  This is used to provide conditional configuration options, such as disabling
  `netrw` if `NERDTree` is installed).

      Plug 'scrooloose/nerdtree'

      ...

      if hz#is#plugged('nerdtree')       let g:loaded_netrwPlugin = 1
  ...     endif

hz#range#uniq()                                              *hz#range#uniq()*
  Loop over the range of text and remove duplicate lines without changing the
  sort order. Originally by Damian Conway, presented in Scripting the Vim
  Editor, Part 4 at IBM developerWorks.

  https://www.ibm.com/developerworks/library/l-vim-script-4/index.html

  Add mappings:

      nmap ;u :%call hz#range#uniq()<CR>

      vmap u :call hz#range#uniq()<CR>

hz#toggle#option({option}, [onoff])                       *hz#toggle#option()*
  Toggle an {option} with `setlocal`. Accepts [onoff] to choose a specific
  state.

hz#toggle#variable({variable}, [onoff])                 *hz#toggle#variable()*
  Toggle an option flag {variable}. Accepts [onoff] to choose a specific
  state.

hz#toggle#gjk_mapping([onoff])                       *hz#toggle#gjk_mapping()*
  Toggle the mapping of [jk] <--> g[jk]. Accepts [onoff] to chose a specific
  state (0 or v:false is off).

hz#ui#tabline()                                              *hz#ui#tabline()*
  Create a cleaner tabline.

      let &tabline = '%!hz#ui#tabline()'

hz#ui#foldtext()                                            *hz#ui#foldtext()*
  A cleaner foldtext function.

      set foldtext='hz#ui#foldtext()'

hz#ui#smart_foldtext([foldtext])                      *hz#ui#smart_foldtext()*
  Sets the local 'foldtext' function to either a provided [foldtext] function.

  Without a [foldtext] function provided, a local 'foldtext' value of
  `getline(v:foldstart)` will be replaced with of |b:hz#ui#default_foldtext|,
  |g:hz#ui#default_foldtext|, or |foldtext()|.

hz#ui#set_guifont([dict])                                *hz#ui#set_guifont()*

hz#ui#set_guifont([list])

hz#ui#set_guifont([font...])

  Set 'guifont' either from the default |g:hzvim_guifont| or from the provided
  dictionary (`{ 'font' : points }`) or list (each item is either `['font',
  points]`, `['font']`, or `'font'`). If the point size is not provided, it is
  set to |g:hzvim_guifont_size|.

hz#ui#status#buffer()                                  *hz#ui#status#buffer()*
  Returns the buffer number as `[n/N]`. Suitable for use in setting a status
  line.

hz#ui#status#preview()                                *hz#ui#status#preview()*
  Returns `[preview]` if the window is marked as a preview window.

hz#ui#status#filemodifiers()                    *hz#ui#status#filemodifiers()*
  Returns status line file modifiers.

hz#ui#status#scm()                                        *hz#ui#status#scm()*
  Returns the SCM status (currently only supports fugitive).

hz#ui#status#conflicted()                          *hz#ui#status#conflicted()*
  Returns the conflicted status.

hz#ui#status#search()                                  *hz#ui#status#search()*
  Returns search count information (currently only supports anzu).

hz#ui#status#capslock()                              *hz#ui#status#capslock()*
  Returns CapsLockStatusline.

hz#ui#status#asyncrun()                              *hz#ui#status#asyncrun()*
  Returns the current asynchronous run status.

hz#ui#status#syntax()                                  *hz#ui#status#syntax()*
  Returns a status line value for either syntastic or ale.

hz#url#encode({url})                                         *hz#url#encode()*
  Encodes non-urlsafe values in {url} with percent hex-encoding (e.g., ' '
  becomes '%20'. Only the path and query parameters are encoded.

  Improves on a version ripped from haskellmode.vim by Andrew Radev (which
  encoded the entire URL).

hz#url#decode({url})                                         *hz#url#decode()*
  Decodes an encoded {url} back to plain-text.

  Based on a version ripped from unimpaired.vim by Andrew Radev.

==============================================================================
COMPATIBILITY                                           *hz.vim-compatibility*


All of the functions in Hz.vim are known to work with MacVim 8.1. Most of them
will work on older Vim versions, other platforms, or NeoVim, but compatibility
is not guaranteed.

==============================================================================
LICENCE                                                       *hz.vim-licence*


Hz.vim is public domain where possible, or licensed under CC0 1.0 where not.
There are no warranties, implied or expressed, about this Hz.vim or its
suitability or fitness for any particular purpose.

See https://creativecommons.org/publicdomain/zero/1.0/legalcode for more
information.


vim:tw=78:ts=8:ft=help:norl:
